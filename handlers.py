from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import Message
from test_gpt import query_gpt4
from config import gpt_token
from openai import AsyncOpenAI
import logging
import asyncio
main_router = Router()

client = AsyncOpenAI(api_key=gpt_token)



class Form(StatesGroup):
    default = State()



from icecream import ic


async def create_assistant(client):
    try:
        assistant = await client.beta.assistants.create(
            name="Math tutor",
            instructions="You are a personal math tutor. Write and run code to answer math questions",
            tools=[{"type": "code_interpreter"}],
            model="gpt-4"
        )
        ic(assistant)
        return assistant
    except Exception as e:
        logging.error(f"Error creating assistant: {str(e)}")
        return None

@main_router.message(F.text)
async def handle_text(message: Message, state: FSMContext):

    await state.set_state(Form.default)
    user_id = message.from_user.id
    context_key = f"user_{user_id}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context_data = await state.get_data()
    ic(context_data)

    user_data = context_data.get(context_key, {'assistant_id': None})
    ic(user_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if 'assistant_id' not in user_data:
        assistant = await create_assistant(client)
        if assistant is None:
            await message.answer("Failed to create an assistant.")
            return
        assistant_id = assistant.id
        user_data['assistant_id'] = assistant_id
        ic(assistant_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ thread_id, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if 'thread_id' not in user_data:
        thread = await client.beta.threads.create()
        if not thread:
            await message.answer("Failed to create a thread.")
            return
        thread_id = thread.id
        user_data['thread_id'] = thread_id
        ic(thread_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context_data[context_key] = user_data
    await state.set_data(context_data)
    ic(await state.get_data())  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ
    await client.beta.threads.messages.create(
        thread_id=user_data['thread_id'],
        role="user",
        content=message.text
    )

    # –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    run = await client.beta.threads.runs.create(
        thread_id=user_data['thread_id'],
        assistant_id='asst_20LTOBd7QB8MOV09lzC1eD5X' # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ assistant_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    ic(run)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    while True:
        run_response = await client.beta.threads.runs.retrieve(
            thread_id=user_data['thread_id'],
            run_id=run.id
        )
        
        if run_response.status in ['completed', 'failed']:
            break
        await asyncio.sleep(0.3)  # –ü–∞—É–∑–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
    messages_response = await client.beta.threads.messages.list(thread_id=user_data['thread_id'])
   
    gpt_response = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
    for msg in messages_response.data:
        if msg.role == 'assistant':
            gpt_response = msg.content[0].text.value
            print("Assistant:", gpt_response)
            break
        else:
            print(f"{msg.role}: [Message content not available or not text]")

    if gpt_response:
        await message.answer(text=gpt_response)
    else:
        await message.answer(text='—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é —Å —Ç–∞–∫–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üòî')
    if gpt_response:
        print("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", gpt_response)
    else:
        print("No assistant messages found.")


   
    









